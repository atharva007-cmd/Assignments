Lex generates a C-language scanner from a source specification.
Specification as in rules for characters/expressions.

We can set actions for the RE.
We get a table-driven lex.yy.c file as an output.
_____________________________________________________________________________
C source code is generated by:
$ lex lex.l
$ lex lex1.l lex2.l lex3.l
(lex.l conventionally favorite for file containing your lex specs)


_____________________________________________________________________________
Output File (default): lex.yy.c
This file contains definition of yylex() function.
yylex()function 
 - returns 1 --> exp found
 - returns 0 --> end of file

Each call to yylex() parses one token, and it picks up from where it left off.


_____________________________________________________________________________
Redirecting Output File:
$ lex -t lex.l > lex.c
All the options/flags are written between "lex" and "lex.l"

The .c file when compiled gives us object program/scanner.

lex library provides a default main() which in turn calls yylex()
$ cc lex.yy.c -ll


_____________________________________________________________________________
LEX SOURCE

%{
definitions;	// Optional
%}

%%
rules;	        // Mandatory
%%

user routines;	// Optional

_____________________________________________________________________________
Special Features
yytext[]  --> Matched input text
yyleng    --> Number of CHAR
yymore()
yyless(n)
REJECT
ECHO


_____________________________________________________________________________

yywrap() Function
Usually called at the end of file
Default return value (1)
if it returns 1 then it continues normal wrap-up


_____________________________________________________________________________
				
	YACC (Yet Another Compiler Compiler)
_____________________________________________________________________________

yacc.y  -->  y.tab.c (Default Output)
But with -t flag it also generates --> y.tab.h

y.tab.h contains expected tokens.
It's included in .l file.


_____________________________________________________________________________

Refer figures 1, 2, 3.


_____________________________________________________________________________

yacc file format is same as lex.

%{
    ....
%}


%%
    production                                           { action; }
    It represents Grammar.
    LHS_Production, RHS_Production1 | RHS_Production2    { action; }
%%




_____________________________________________________________________________

Special yacc Definitions
%start - Define Root/First token.
%token - Define different token identities.
%union - Helps lex to return tokens of different token-types.
%type - Define/Represent different token-types.

_____________________________________________________________________________

Special yacc Definitions
%start - Define Root/First token.
%token - Define different token identities.
%union - Helps lex to return tokens of different token-types.
%type - Define/Represent different token-types.

_____________________________________________________________________________













